


from tkinter import *
import random
#import colour
import tkinter as tk
from tkinter import messagebox
from enum import Enum

class COLORS(Enum):
    RED = "Red"
    BLUE = "Blue"
    GREEN = "Green"
    YELLOW = "Yellow"
    PINK = "Pink"
    ORANGE = "Orange"

##__________________________________________________________________________________________________________________##
## Code class ##
# Uses COLORS Enum to create a list of colors used to generate the secret code.
class Code():
    def __init__(self):
        self.colors = []
        for i in COLORS:
            self.colors.append(i.value)

    # Returns a list of 4 colors in random order.
    def secret_code(self):
        return random.sample(self.colors, 4)

    # Validation. Checks that guess is only 4 items in length. Used by play() in Game class.
    # Displays an error message box.
    def code_check(self, guess):
        if len(guess) != 4:
            messagebox.showwarning("Invalid Input", "Guess must contain exactly 4 colors.")
            return False
        return True


##__________________________________________________________________________________________________________________##
## Game Class ##
# Contains a code object, secret code, empty list for guess code, counter for number of guesses,
# button color placeholder string and peg Images.
class Game():
    def __init__(self):
        self.code = Code()
        self.secret_code = self.code.secret_code()  # Generate Secret Code
        self.guess_code = []
        self.num_guesses = 0
        self.max_guesses = 10
        self.button_color = ""
        self.black_peg_image = tk.PhotoImage(file="images/Black.png").subsample(7, 7)
        self.grey_peg_image = tk.PhotoImage(file="images/Grey.png").subsample(7, 7)
        self.white_peg_image = tk.PhotoImage(file="images/White.png").subsample(33, 33)

    # Evaluates the user-generated guess list (guess_code) against the secret code.
    # Displays the guess and the result / clues.
    def play(self, guess, label_result):
        print("guess_code = ", self.guess_code)
        # Validation check. Display guess and results.
        if self.code.code_check(guess):
            result = self.compare_code(self.secret_code, guess)  # Compare guess to secret code
            self.display_result(result)     # Show guess in GUI
            self.display_guess(guess)

            # Display congratulations message and disable further guessing if correct.
            if result == ["black", "black", "black", "black"]:
            #if result == [Color("black"), Color("black"), Color("black"), Color("black")]:
                label_result.config(text="Congratulations! You've guessed the correct code.")
                button_guess.config(state=tk.DISABLED)
            # Display try again message if incorrect. Increment num guesses and clear guess_code list.
            else:
                label_result.config(text="Please try again")
            self.num_guesses += 1
            self.guess_code = []

        # Clear guess_code list for invalid guess.
        else:
            self.guess_code = []

        #Display losing message if max guess count is reached.
        if self.num_guesses >= self.max_guesses:
            button_guess.config(state=tk.DISABLED)
            label_result.config(text="Max guesses reached. You lose.")

        print("num_guesses = ", self.num_guesses)

    # Evaluates user guess against secret code.
    # Used by play().
    def compare_code(self, secret_code, guess_code):
        checked_colors = []     # Holds colors having already received a black/white peg to avoid duplicate clues.
        #peg_code = [Color("grey"), Color("grey"), Color("grey"), Color("grey")]:
        peg_code = ["grey", "grey", "grey", "grey"]

        # If guess color and location are matching, change peg color to black.
        for i in range(len(secret_code)):
            if guess_code[i] == secret_code[i]:
                #peg_code[i] = (Color("black"))
                peg_code[i] = ("black")
                checked_colors.append(guess_code[i])
        # If color matches but in wrong location, change peg color to white. Do not evaluate duplicate colors.
        for i in range(len(secret_code)):
            if guess_code[i] in secret_code and guess_code[i] not in checked_colors:
                #peg_code[i] = (Color("white"))
                peg_code[i] = ("white")
                checked_colors.append(guess_code[i])
        # Sort clues by peg color for "randomization."
        #peg_code = sorted(peg_code, key=lambda color: color.rgb)
        random.shuffle(peg_code)
        return peg_code

    # Creates 4 labels to display clue colors (black, white, grey) in the right frame using corresponding peg images.
    # Takes a list of peg colors generated by compare_code.
    # Used by play().
    def display_result(self, result):
        peg_labels = []
        columns = [0, 1, 2, 3]
        for i in range(4):
            #if result[i] == Color("black"):
            if result[i] == "black":
                peg_image = self.black_peg_image
            #elif result[i] == Color("white"):
            elif result[i] == "white":
                peg_image = self.white_peg_image
            else:
                peg_image = self.grey_peg_image

            # Create the label in the right frame with the corresponding color image.
            peg_label = tk.Label(right_frame, image=peg_image,bg="grey")
            # Place the label in the correct row and column.
            peg_label.grid(row=(self.num_guesses + 1), column=columns[i], padx=5, pady=5)
            
            peg_labels.append(peg_label)

    # Creates 4 labels to display user guess colors in the center frame.
    def display_guess(self, guess_code):
        peg_labels = []
        count = 0
        for i in range(4):
            peg_label = tk.Label(center_frame, width=8, height=2, bg=guess_code[i])
            peg_label.grid(row=(self.num_guesses + 1), column=count, padx=5, pady=5)
            peg_labels.append(peg_label)
            count = count + 1

    # Empties the contents of the frames included in the parameter list.
    # Used by guess, clear guess, and new game buttons.
    def clear_display(self, frames):
        for frame in frames:
            for widget in frame.winfo_children():
                widget.destroy()

    # Adds color name string to the guess_code list.
    # Used by color/peg buttons.
    def create_guess(self, color):
        self.guess_code.append(color)

    # Dynamically displays text string as user selects individual color buttons.
    # Allows user to view guess in real time before submitting it with the guess button.
    def display_current_guess(self):
        label_guess_current = tk.Label(upper_frame2, text=("Current Guess:" + str(self.guess_code)))
        label_guess_current.grid(row=0, column=1, padx=5, pady=1)

    # Empties guess_code list.
    # Used by clear_guess button. (requires a function)
    def clear_guess(self):
        self.guess_code = []

    # Returns guess_code.
    # Used by guess button to invoke play(). (requires a function)
    def get_guess(self):
        return self.guess_code

    # Invoked by new game button to clear relevant content.
    def set_new_game(self):
        self.secret_code = self.code.secret_code()  # Generate new secret code.
        self.guess_code = []    # Clear guess_code.
        self.num_guesses = 0    # Reset number of guesses.
        button_guess.config(state=tk.NORMAL)    # Enable guess button.
        label_result.config(text="Clues:")      # Reset label_result text.
        print("new secret code = ", self.secret_code)


##__________________________________________________________________________________________________________________##
## Create the Tkinter GUI ##
root = tk.Tk()
root.title("Mastermind Game")
root.config(bg="skyblue")

## Create GUI frames ##
# Upper frame holds instructions
upper_frame = Frame(root, width=1000, height=100, bg='skyblue')
upper_frame.grid(row=0, columnspan=3, padx=5, pady=5)

# Upper frame2 contains label for user guess text.
upper_frame2 = Frame(root, width=1000, height=100, bg='skyblue')
upper_frame2.grid(row=1, columnspan=3, padx=5, pady=5)

# Left frame holds buttons for guessing, new game, etc.
left_frame = Frame(root, width=300, height=400, bg='skyblue')
left_frame.grid(row=2, column=0, padx=5, pady=5)

# Center frame holds a record of guesses.
center_frame = Frame(root, width=300, height=400, bg='skyblue')
center_frame.grid(row=2, column=1, padx=5, pady=5)

# Right frame holds a record of clues/hints
right_frame = Frame(root, width=300, height=400, bg='skyblue')
right_frame.grid(row=2, column=2, padx=5, pady=5)

# Frame Lists: Used by clear display() for new game & clear guess buttons.
display_frames = [center_frame, right_frame]
guess_text = [upper_frame2]

##__________________________________________________________________________________________________________________##
## Create GUI labels and buttons ##
entry_label = tk.Label(upper_frame, text="Guess the secret code by entering a 4-color guess using the buttons below. "
                                         "The secret code contains 4 different colors. \n"
                                         "Use the clues to refine your guess: \n "
                                         "Grey Peg = One color is not in the secret code. \n"
                                         "White Peg = One correct color in the wrong location. \n"
                                         "Black Peg = One correct color in the right location.")
entry_label.grid(row=0, column=0, padx=10, pady=10)

label_result = tk.Label(upper_frame, text="Clues:")
label_result.grid(row=2, column=1, padx=10, pady=10)

label_guesses = tk.Label(upper_frame, text="Your Guesses:")
label_guesses.grid(row=2, columnspan=3, padx=10, pady=10)

label_guess_current = tk.Label(upper_frame2, text="Current Guess:")
label_guess_current.grid(row=0, column=1, padx=5, pady=1)

## Create Peg Buttons ##
# Represent color choices for entering user guesses.
# Button actions = appends "color" to guess_code[], sets self button color, modifies current guess label.
peg_buttons = []
count = 1

for c in COLORS:
    color = c.value
    peg_button = tk.Button(left_frame, width=8, height=2, text=color, bg=color,
                           command=lambda color=color: [game.create_guess(color),
                                                        game.display_current_guess()])
    peg_button.grid(row=count, column=1, padx=20, pady=4)
    peg_buttons.append(peg_button)
    count = count + 1

##__________________________________________________________________________________________________________________##
## Instantiate the Game object ##
game = Game()
print("secret code = ", game.secret_code)

## Guess Button ##
button_guess = tk.Button(left_frame, text="Guess", command=lambda: [game.play(game.get_guess(), label_result),
                                                                    game.clear_display(guess_text)])
button_guess.grid(row=1, column=0, padx=5, pady=5)

## Clear Guess Button ##
button_clear_guess = tk.Button(left_frame, text="Clear Guess", command=lambda: [game.clear_guess(),
                                                                                game.clear_display(guess_text)])
button_clear_guess.grid(row=2, column=0, padx=5, pady=5)

## New Game Button ##
button_new_game = tk.Button(left_frame, text="New Game", command=lambda:[game.clear_display(display_frames),
                                                                         game.set_new_game(), game.clear_display(guess_text)])
button_new_game.grid(row=3, column=0, padx=5, pady=5)

## Quit Button ##
button_quit = tk.Button(left_frame, text="Quit", command=root.destroy)
button_quit.grid(row=4, column=0, padx=5, pady=5)

root.mainloop()





